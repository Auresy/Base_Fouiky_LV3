******
Définition des formes de base
******
Points d'attention :
	> faire des Goto en haut d'éval pour respecter la pile (pas trop d'arguments initialisés pour rien dans la recursivité)
******
define
set!
if 
and
or
******

1 define 
	> defini la variable dans l'env actuel
	> renvoie par convention le symbole de la variable
	> switch case anx1
	> renvoie (X) au lieu de X ...
		> corrigé (besoin d'un car de plus)

1 set! 
	> renvoie la valeur de ce qui vient d'être défini
	> redefini une variable au plus proche de l'env
	> renvoie un msg d'erreur ("Variable %s symbol non définie") sinon

1 if
	> evaluation de l'entrée et conséquence sur la suite
	> si pas de csq et #f alors renvoyer #f
	>> attention aux ordres des CAR et CDR (la ca marche mais pas sur pour plus tard)

1 and
	> Attention aux CC pour accelerer 
	> CC si une condition est fausse
1 or
	>Attention aux CC
	> CC si une condition est vraie

******

1 IF/AND/OR 
	> tout sauf 0 vaut true
	>> long a mettre en place, utilisateur pour un con ...
	> fait pour le if

1 Eval
	> Mettre une variable tempo input et un GOTO Switch au lieu du reccursif
	> fonction Check à la fin qui ne sort que si l'on vient de l'entrée principale

1 Switch_Print
	> Mettre une variable globale qui contrôle les Prints 

1 Eval 
	> Utiliser les primitives pour le calcul

1 Eval
	> flag : change tête
	> Si une fonction change la tête il faut mettre a jour la var : tempi
	> cas particulier ou l'entrée standard change (input != tempi s'applique)
	>> Sortie autorisée sauf si HEAD_CHANGE flag 1
		> dans ce cas HEAD_CHANGE => 0 et goto Eval_in avec input = Tempi
	> pas pour IF
		>En fait si ca marchait ...

X Env: Suppr ?
	> voir pk certaines variables ne sont pas suppr lors de la purge 

******
1 Primitives - char->integer
	> si le caractère est un entier, il le renvoie dans son format
	> sinon erreur et quite le programme
1 primitives - integer->char
	> ACSIIIIIIIIIII :p
0 Primitives - number->string
0 Primitives - string->number
0 Primitives - symbol->string
0 Primitives - string->symbol
...

1 EVAL-Primitives
	> Evaluer une sous-chaine avant de l'envoyer a traiter dans une primitive
	>> sera fait dans la fonction ?

X Symbole Deep avec goto si flag change
******

ANX1
	
	switch case :

	PAIR :
	
		si "define" => ENV_Define(symbol, object)

	SYMBOL :
		rechercher si le symbole existe
			> existe < evaluer comme son objet lié
			> !existe < auto-evaluer comme un symbole de même nom
	INTEGER :
	PRIMITIVE :
	BOOLEAN :
	NIL :
	CHAR :

******
TUTO 4
******
* Begin ?
* Lambda, env et aggregats ?
* Fermeture ?
* Let et let* ?
***

Begin
	> séquence de Sexpr
	> retourne la dernière Sexppr
$ (define x 8)
$ (if ( > x 5 ) (begin (set! x 5) (* x x) ) (- x 5 ) ) <-- If ne peut pas prendre + que deux args -> besoin de Begin
&&
$ (begin 1 2 3 )
==> 3
&&
$ (is_begin (Sexpr)) 
{
	ret=()
	expr = cdr(expr)
	While (expr != nil)
	{
		ret = eval(Sexppr)
		[...]
	} 	
}


Forme Lambda
	> Retourne un objet de type PROCEDURE  => newtype :)
$ (lambda (x) (* x 2)) ->(Forme parametre corps) ->(fonction anonyme, non liée à un symbole), fonction jetable ...
==> #<procedure>

$ (define x 16)
$ ((lambda (x) (* x 2 )) 4)
==> 8
$ x
==> 16

Lambda : extension de l'environnement, environnement d'execution de la fonction
	> environnements imbriqués
	> un nouvel env pour chaque lambda

*
à l'execution : 
				1.> Vérification des arguments
				2.> Création d'un environnement local
				3.> Association de l'évaluation du parametre "effectif" au parametre "formel"
				4.> Execution du corps de la fonction
				5.> Env papa ==> qui est attaché ?

*

Struct object_t ==> { Proc/compound/aggregat }
	> Parametre
	> Body
	> Env de la déclaration
struct {
	struct object_t* param,
	struct object_t* body,
	struct object_t* env_papa,
} Compound

Body et param non évalués

*

Fonctions nommées :
	> define

$ (define Fois2 (lambda (x) (* 2 x)))
||
$ (define (Fois2 x) (* x 2))

/!\ le begin est implicite dans certains cas ...

(define (fact n)
  (if (< n 2) 1
    (* n (fact (- n 1) ) )
    )) <== Fonction factorielle
$ (fact 3) <== extension de plein d'environnement 

=> Penser au ramasse-miettes ID: par Objet :)

*

Fermeture :
  > Fonction accompagnée de son environnement lexical
  > ensemble des variables non locales utilisées dans la fonction
  > pas de fermeture en C (pas fait pour) 
ex. C
void* Compte(int total)
{
  int incre(int inc) { total += inc; return total;}
  return incre;
}
void main() 
{
  (* compteur ) (int) = compte(10);
  printf("%d",compteur(3));
}
==> n'affiche pas 13 car Total n'existe plus (sauf si global...)
Pb de pile, limite du C

(define compteur
  (( lambda (total)
    (lambda (inc)
      (set! total (+ total inc)
      total ))
    10)
)
==> ca ca marche
  > param : total
  > env   : corps
  > corps : Tout de (lambda (inc) ... total ))

***

Let, Let* et map

( let ( (x 2) (y 3)) (* x y)) ==> 6
  > On reutilise lambda
  $ (( lambda (x y) (* x y)) 2 3)
  
  let* : evaluation dans l'autre sens (gauche droite) contrairement au let (droite gauche)

(lambda () (define x 7) define z ( + x y )) 
  (  * z x ))
  
map application d'une procc a une liste

******
Session 22/11
***

Liv 2 :
1	> Auto eval
1	> If 1er evaluant
Liv 3 :
1	> eq? (egalité object meme evalué)
0	> Primtives Type
Liv 4 :
0 	> PRINT_Primitive
1	> PRINT_Compound
1	> Modif environements :
		>> object (pair) ENV_Creer(object Papa)
		>> Variable dans eval (env en cours)
		>> MAJ Env_chercher / définir etc ... (aller chercher dans l'env )
0	> Define à MAJ
1	> Begin
0	> Ramasse miettes
	> ...

0	> verif define
0	> TESTS :
		> define
		> begin
		> lambda
		> let
		> procedure?
		> map
		> factorielle
		> compteur
		
0	> Map

lambda 				F
Let 				M
map ?				F
procedures			F
procedure ?			M
define oldschool	F

***